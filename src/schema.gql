# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Tag {
  id: String!
  title: String!
  category: String!
  users: [User!]
  post: [Post!]!
}

type Report {
  id: String!
  description: String!
  createdAt: DateTime!
  post: Post
  comment: Comments
  createdBy: User
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Post {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  content: String!
  category: String!
  photo: String

  """Visiblity state of announcements"""
  isHidden: Boolean!
  location: String

  """Total Number of likes for event"""
  likeCount: Float

  """Event saved boolean"""
  isSaved: Boolean!
  linkName: String
  Link: String
  endTime: DateTime
  postComments: [Comments!]
  postReports: [Report!]
  createdBy: User!
  likedBy: [User!]
  savedBy: [User!]

  """Event is liked"""
  isLiked: Boolean!
  tags: [Post!]!
}

type Comments {
  id: String!
  content: String!
  createdAt: DateTime!

  """Visiblity state of announcements"""
  isHidden: Boolean!
  post: Post!
  commentReports: [Report!]
  createdBy: User!
}

type Permission {
  id: String!
  account: [UserRole!]!
  livePosts: [String!]!
  unlivePosts: [String!]!
  users: [User!]
}

enum UserRole {
  ADMIN
  DEV_TEAM
  LEADS
  MODERATOR
  USER
  HOSTEL_SEC
  SECRETARY
}

type User {
  id: String!
  name: String
  ldapName: String
  roll: String!
  mobile: String
  isNewUser: Boolean!
  post: [Post!]
  comment: [Comments!]
  reports: [Report!]
  permission: Permission!

  """User's role"""
  role: UserRole!
  createdBy: User
  interests: [Tag!]
  likedPost: [Post!]
  savedPost: [Post!]
  accountsCreated: [User!]!
}

type LoginOutput {
  accessToken: String!
}

type getPostOutput {
  list: [Post!]
  total: Float!
}

type ReportReason {
  id: String!

  """Reason for the post bieng reported"""
  reason: String!

  """Reports severity count"""
  count: Float
}

type Query {
  getMe: User
  getUsers: [User!]!
  getTags: [Tag!]!
  getTag(TagId: String!): Tag!
  getCategories: [String!]!
  FindAllposts(lastEventId: String!, take: Float!, filteringCondition: FilteringConditions!, orderInput: OrderInput!): getPostOutput!
  Findpost(Postid: String!): Post!
  getAllComments: [Comments!]!
  getComments(id: String!): Comments!
  reports: [Report!]!
  getReport(id: String!): Report!
  reportreasons: [ReportReason!]!
  reportreason(id: String!): ReportReason!
}

input FilteringConditions {
  search: String
  tags: [String!]
  isSaved: Boolean! = false
  categories: [String!]
  isLiked: Boolean! = false
  showOldPost: Boolean! = false
}

input OrderInput {
  byLikes: Boolean
  byComments: Boolean
}

type Mutation {
  login(loginInput: LoginInput!): LoginOutput!
  createUser(user: CreateUserInput!, permission: PermissionInput!): User!
  createTag(CreateTagInput: CreateTagInput!): Tag!
  CreatePost(postInput: CreatePostInput!): Post!
  updatePost(updatePostInput: UpdatePostInput!, id: String!): Post!
  removePost(id: String!): Post!
  toggleLike(postId: String!): Post!
  toggleSave(postId: String!): Post!
  createComment(createCommentInput: CreateCommentInput!): Comments!
  updateComment(updateCommentInput: UpdateCommentInput!, id: String!): Comments!
  removeComment(id: String!): Comments!
  createReport(createReportInput: CreateReportInput!, postId: String!): Report!
  removeReport(id: String!): Report!
  createReportreason(createReportreasonInput: CreateReportreasonInput!): ReportReason!
  updateReportreason(updateReportreasonInput: UpdateReportreasonInput!, id: String!): ReportReason!
  removeReportreason(id: String!): ReportReason!
}

input LoginInput {
  roll: String!
  pass: String!
}

input CreateUserInput {
  name: String!
  roll: String!
  role: UserRole!
  pass: String!
}

input PermissionInput {
  account: [UserRole!]!
  livePosts: [String!]!
  unlivePosts: [String!]!
}

input CreateTagInput {
  title: String!
  category: String!
}

input CreatePostInput {
  title: String
  content: String!
  endTime: DateTime
  linkName: String
  link: String
  tagIds: [String!]!
  isHidden: Boolean
  category: String!
  location: String
  Photo: String
}

input UpdatePostInput {
  title: String
  content: String
  endTime: DateTime
  linkName: String
  link: String
  tagIds: [String!]
  isHidden: Boolean
  category: String
  location: String
  Photo: String
}

input CreateCommentInput {
  content: String!
  postId: String!

  """Visiblity state of announcements"""
  isHidden: Boolean!
}

input UpdateCommentInput {
  content: String
  postId: String

  """Visiblity state of announcements"""
  isHidden: Boolean
}

input CreateReportInput {
  description: String!
}

input CreateReportreasonInput {
  """Reason for the post bieng reported"""
  reason: String!

  """Reports severity count"""
  count: Float
}

input UpdateReportreasonInput {
  """Reason for the post bieng reported"""
  reason: String!

  """Reports severity count"""
  count: Float
}
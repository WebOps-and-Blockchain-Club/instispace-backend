# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Report {
  id: String!
  description: String!
  createdAt: DateTime!
  post: Post
  comment: Comments
  createdBy: User
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Comments {
  id: String!
  content: String!
  createdAt: DateTime!

  """Visiblity state of announcements"""
  isHidden: Boolean!
  post: Post!
  commentReports: [Report!]
  createdBy: User!

  """Visiblity state of reports"""
  status: PostStatus!
  isReported: Boolean!
  reportCount: Float!
  likedBy: [User!]

  """Total Number of likes for event"""
  likeCount: Float

  """Event is liked"""
  isLiked: Boolean!
  dislikedBy: [User!]
  dislikeCount: Float!
  isDisliked: Boolean!
}

enum PostStatus {
  POSTED
  TO_BE_APPROVED
  APPROVED
  REPORTED
  IN_REVIEW
  REPORT_ACCEPTED
  REPORT_REJECTED
}

type Permission {
  id: String!
  account: [UserRole!]!
  livePosts: [String!]!
  hostel: [String!]!
  createTag: Boolean!
  createNotification: Boolean!
  handleReports: Boolean!
  approvePosts: Boolean!
  users: [User!]
}

enum UserRole {
  ADMIN
  DEV_TEAM
  LEADS
  MODERATOR
  USER
  HOSTEL_SEC
  SECRETARY
}

type Amenity {
  """Auto generated uuid for an Amenity"""
  id: String!

  """Amenity's name"""
  name: String!

  """Amenity image"""
  description: String!

  """Amenity's visual description"""
  images: String

  """Hostel to which amenity is related"""
  hostel: Hostel!
}

"""Annoucements Entity, It will be diplayed for all hostels"""
type HostelAnnouncement {
  """Unique uuid generated for each announcement"""
  id: String!

  """Announcement's Title"""
  title: String!

  """Announcement's Description, text"""
  description: String!

  """Image description for announcement"""
  images: String
  createdAt: DateTime!
  endTime: DateTime!

  """Visiblity state of announcements"""
  isHidden: Boolean!

  """User who created the announcement"""
  user: User!

  """Hostels on which the announcement needs to be diplayed"""
  hostels: [Hostel!]!
}

type HostelContact {
  """Auto generated uuid"""
  id: String!

  """name of the person with whom the contact is related to"""
  name: String!

  """type of contact Warden-contact/secretory-contact etc."""
  type: String!

  """contact"""
  contact: String!

  """relation which stores the contact-hostel"""
  hostel: Hostel
}

"""Hostel entity"""
type Hostel {
  """Unique uuid generated for each Hostel"""
  id: String!

  """Hostel's name"""
  name: String!

  """Residents of The Hostel"""
  users: [User!]

  """Hostel's Announcement, they will be displayed on the notice board"""
  announcements: [HostelAnnouncement!]
  contacts: [HostelContact!]!
  amenities: [Amenity!]!
}

type User {
  id: String!
  name: String
  ldapName: String
  roll: String!
  mobile: String
  isNewUser: Boolean!
  notifyPost: String
  fcmToken: String

  """User's Hostel amd its details"""
  hostel: Hostel

  """Announcements Created by User"""
  hostelannouncements: [HostelAnnouncement!]!
  post: [Post!]
  comment: [Comments!]
  reports: [Report!]
  permission: Permission

  """User's role"""
  role: UserRole!
  createdBy: User
  interests: [Tag!]
  likedPost: [Post!]
  dislikedPost: [Post!]
  likedComment: [Comments!]
  dislikedComment: [Comments!]
  savedPost: [Post!]
  accountsCreated: [User!]!
  photo: String!
}

type Post {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  content: String!
  category: String!
  photo: String

  """Visiblity state of announcements"""
  isHidden: Boolean!
  location: String

  """Total Number of likes for event"""
  likeCount: Float

  """Event saved boolean"""
  isSaved: Boolean!

  """Visiblity state of reports"""
  status: PostStatus!
  linkName: String
  Link: String
  endTime: DateTime
  postComments: [Comments!]
  postReports: [Report!]
  createdBy: User!
  likedBy: [User!]
  savedBy: [User!]

  """Event is liked"""
  isLiked: Boolean!
  isReported: Boolean!
  reportCount: Float!
  dislikeCount: Float!
  isDisliked: Boolean!
  dislikedBy: [User!]
  tags: [Tag!]!
}

type Tag {
  id: String!
  title: String!
  category: String!
  users: [User!]
  post: [Post!]!
}

type LoginOutput {
  isNewUser: Boolean!
  role: String!
  token: String!
}

type getPostOutput {
  list: [Post!]
  total: Float!
}

type ReportReason {
  id: String!

  """Reason for the post bieng reported"""
  reason: String!

  """Reports severity count"""
  count: Float
}

type Query {
  getMe: User
  getUsers: [User!]!
  getTags: [Tag!]!
  getTag(TagId: String!): Tag!
  getCategories: [String!]!
  findPosts(lastEventId: String!, take: Float!, filteringCondition: FilteringConditions!, orderInput: OrderInput!): getPostOutput!
  findOnePost(Postid: String!): Post!
  getAllComments: [Comments!]!
  getComments(id: String!): Comments!
  reportreasons: [ReportReason!]!
  reportreason(id: String!): ReportReason!
  reports: [Report!]!
  getReport(id: String!): Report!
  getHostels: [Hostel!]!
}

input FilteringConditions {
  search: String
  posttobeApproved: Boolean
  tags: [String!]
  isSaved: Boolean! = false
  categories: [String!]
  isLiked: Boolean! = false
  showOldPost: Boolean! = false
}

input OrderInput {
  byLikes: Boolean
  byComments: Boolean
}

type Mutation {
  login(loginInput: LoginInput!): LoginOutput!
  createUser(user: CreateUserInput!, permission: PermissionInput!): User!
  updateUser(userInput: UpdateUserInput!): Boolean!
  setHostel(hostelname: String!): Hostel!
  createTag(CreateTagInput: CreateTagInput!): Tag!
  createPost(postInput: CreatePostInput!): Post!
  updatePost(updatePostInput: UpdatePostInput!, id: String!): Post!
  changePostsStatus(id: String!): Post!
  removePost(id: String!): Post!
  toggleLikePost(postId: String!): Post!
  toggleDislikePost(postId: String!): Post!
  toggleSavePost(postId: String!): Post!
  createComment(createCommentInput: CreateCommentInput!): Comments!
  updateComment(updateCommentInput: UpdateCommentInput!, id: String!): Comments!
  removeComment(id: String!): Comments!
  toggleLikeComment(commentId: String!): Comments!
  toggleDislikeComment(commentId: String!): Comments!
  createReportreason(createReportreasonInput: CreateReportreasonInput!): ReportReason!
  updateReportreason(updateReportreasonInput: UpdateReportreasonInput!, id: String!): ReportReason!
  removeReportreason(id: String!): ReportReason!
  createReport(createReportInput: CreateReportInput!, postId: String!): Report!
  removeReport(id: String!): Report!

  """Mutation to create hostel"""
  createHostel(name: String!): Hostel!

  """Mutation to create amenity"""
  createAmenity(NewAmenity: CreateAmenityInput!, HostelId: String!): Amenity!
  createNotification(NotificationData: NotificationInput!): Boolean!

  """Mutation to create contact"""
  createContact(NewContact: CreateContactInput!, HostelId: String!): HostelContact!

  """Mutation to create announcement"""
  createHostelAnnouncement(NewHostelAnnouncement: createHostelAnnounceInput!): HostelAnnouncement!
}

input LoginInput {
  roll: String!
  pass: String!
}

input CreateUserInput {
  roll: String!
  role: UserRole!
}

input PermissionInput {
  account: [UserRole!]!
  livePosts: [String!]!
  hostel: [String!]!
  createTag: Boolean
  createNotification: Boolean
  handleReports: Boolean
  approvePosts: Boolean
}

input UpdateUserInput {
  name: String
  mobile: String
  interests: [String!]
}

input CreateTagInput {
  title: String!
  category: String!
}

input CreatePostInput {
  title: String
  content: String!
  endTime: DateTime
  linkName: String
  link: String
  tagIds: [String!]
  isHidden: Boolean
  category: String!
  location: String
  Photo: String
}

input UpdatePostInput {
  title: String
  content: String
  endTime: DateTime
  linkName: String
  link: String
  tagIds: [String!]
  isHidden: Boolean
  category: String
  location: String
  Photo: String
}

input CreateCommentInput {
  content: String!
  postId: String!

  """Visiblity state of announcements"""
  isHidden: Boolean!
}

input UpdateCommentInput {
  content: String
  postId: String

  """Visiblity state of announcements"""
  isHidden: Boolean
}

input CreateReportreasonInput {
  """Reason for the post bieng reported"""
  reason: String!

  """Reports severity count"""
  count: Float
}

input UpdateReportreasonInput {
  """Reason for the post bieng reported"""
  reason: String!

  """Reports severity count"""
  count: Float
}

input CreateReportInput {
  description: String!
}

input CreateAmenityInput {
  """Amenity's name"""
  name: String!

  """Amenity description"""
  description: String!
}

"""Input-Type for Create Notification Mutaion"""
input NotificationInput {
  """Title of Notification"""
  title: String!

  """Roll no.s"""
  rolls: [String!]

  """Body of Notification"""
  body: String!

  """Images for Notification"""
  imageUrl: String
}

input CreateContactInput {
  """Contact's type"""
  type: String!

  """name of the Person"""
  name: String!

  """Contact"""
  contact: String!
}

input createHostelAnnounceInput {
  """Announcement's Title"""
  title: String!

  """Announcement's Descriptions"""
  description: String!

  """Announcement's Endtime"""
  endTime: String!

  """Announcement's Images"""
  imageUrls: [String!]

  """Hostels' Ids"""
  hostelIds: [String!]!
}
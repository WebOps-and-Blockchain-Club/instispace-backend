# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Amenity {
  description: String!
  hostel: Hostel
  id: String!
  images: String
  name: String!
}

"""Annoucements Entity, It will be diplayed for all hostels"""
type Announcement {
  createdAt: DateTime!

  """Announcement's Description, text"""
  description: String!
  endTime: DateTime!

  """Hostels on which the announcement needs to be diplayed"""
  hostels: [Hostel!]!

  """Unique uuid generated for each announcement"""
  id: String!

  """Image description for announcement"""
  images: String

  """Visiblity state of announcements"""
  isHidden: Boolean!

  """Announcement's Title"""
  title: String!

  """User who created the announcement"""
  user: User!
}

enum Category {
  FOUND
  LOST
}

type Comment {
  content: String!
  createdBy: User!
  id: String!
  netop: Netop!
  query: MyQuery!
}

type Complaint {
  """
  Category of a Complaint, describes whether the Complaint is a Mess/General/Hostel concern
  """
  category: ComplaintCategory!

  """Complaints description"""
  description: String!

  """Unique uuid generated for each Complaint"""
  id: String!

  """Complaints visual Description"""
  images: String

  """Complaint resolution status"""
  isResolved: Boolean!

  """Description of the loaction of the issue"""
  location: String!

  """Written Proof describing complaint's resolution status"""
  resolutionDesc: String

  """Visual Proof describing complaint's resolution status"""
  resolutionImg: String

  """Complaints Title"""
  title: String!

  """users approving the complaint"""
  upvotedBy: [User!]

  """Describes how many of the user approved this Complaint"""
  upvotes: Float

  """Person who raised the issue"""
  user: User!
}

enum ComplaintCategory {
  GENERAL_COMPLAINTS
  HOSTEL_COMPLAINTS
  MESS_COMPLAINTS
}

input ComplaintInput {
  """Category of the Complaint"""
  category: ComplaintCategory!

  """Complaint's description"""
  description: String!

  """Description of the location of the Complaint"""
  location: String!

  """Complaint Title"""
  title: String!
}

type Contact {
  contact: String!
  hostel: Hostel
  id: String!
  name: String!
  type: String!
}

"""Input For Create Account Mutation"""
input CreateAccountInput {
  """Super-User's role"""
  role: String!

  """Super-User's email"""
  roll: String!
}

input CreateAmenityInput {
  description: String!
  name: String!
}

"""Announcement Input"""
input CreateAnnouncementInput {
  """Announcement's Descriptions"""
  description: String!

  """Announcement's Endtime"""
  endTime: String!

  """Hostels' Ids"""
  hostelIds: [String!]!

  """Announcement's Title"""
  title: String!
}

input CreateContactInput {
  contact: String!
  name: String!
  type: String!
}

"""Input for Hostel"""
input CreateHostelInput {
  """Hostel's name"""
  name: String!
}

"""Input for createSec Mutation"""
input CreateSecInput {
  """Hostel Secretory Email"""
  roll: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DeleteComplaintInput {
  """Description of whether complaint is Resolved or not"""
  isResolved: Boolean

  """written Proof describing complaint resolution status"""
  resolutionDesc: String
}

input EditAmenityInput {
  description: String
  name: String
}

"""Announcement Input"""
input EditAnnouncementInput {
  """Announcement's Descriptions"""
  description: String

  """Announcement's Endtime"""
  endTime: String

  """Hostels' Ids"""
  hostelIds: [String!]

  """Announcement's Title"""
  title: String
}

input EditComplaintInput {
  """Complaint Description"""
  description: String

  """Description of location of the issue"""
  location: String

  """Complaint Title"""
  title: String
}

input EditContactInput {
  contact: String
  name: String
  type: String
}

"""Input for editing items"""
input EditItemInput {
  """LDAP User's Phone number"""
  contact: String

  """Item's Location"""
  location: String

  """Item's Title"""
  name: String

  """Time at which the item is lost or found"""
  time: String
}

type Event {
  content: String!
  createdAt: DateTime!
  createdBy: User!
  id: String!
  isHidden: Boolean!

  """Returns true if the User has likes this Event, else false"""
  isLiked: Boolean!

  """Event starred boolean"""
  isStared: Boolean!

  """Total Number of likes for event"""
  likeCount: Float!
  linkName: String
  linkToAction: String
  location: String!
  photo: String

  """Get the list of Tags added for an Event"""
  tags: [Tag!]
  time: DateTime!
  title: String!
}

"""Input for Query get User"""
input GetUserInput {
  """User's Id"""
  id: String!
}

"""Hostel entity"""
type Hostel {
  amenities: [Amenity!]

  """Hostel's Announcement, they will be displayed on the notice board"""
  announcements: [Announcement!]!
  contacts: [Contact!]

  """Unique uuid generated for each Hostel"""
  id: String!

  """Hostel's name"""
  name: String!

  """Residents of The Hostel"""
  users: [User!]
}

type Item {
  """Item's status, descibes whether the item is Lost or Found"""
  category: Category!

  """Contact Number of User"""
  contact: String

  """Unique uuid generated for each Item"""
  id: String!

  """Item's Images"""
  images: String

  """Item's Status, describes whether the issue is resolved or not"""
  isResolved: Boolean!

  """Item's Location"""
  location: String!

  """Name of the Lost/Found Item"""
  name: String!

  """Time at which item is lost or found"""
  time: DateTime!

  """Item's User"""
  user: User!
}

"""Item  Input"""
input ItemInput {
  """Item's Category can be either Lost or Found"""
  category: String!

  """LDAP User's Phone number"""
  contact: String

  """Item's Location"""
  location: String!

  """Item's Title"""
  name: String!

  """Time at which the item is lost or found"""
  time: String!
}

"""Input for Login Mutation"""
input LoginInput {
  """User's Password"""
  pass: String!

  """User's Email/Roll-Number"""
  roll: String!
}

"""Output for Login Mutation"""
type LoginOutput {
  """true if the user is logging in for the first time"""
  isNewUser: Boolean!

  """User's role"""
  role: UserRole!

  """jwt token, used for authorization"""
  token: String!
}

"""Input for updateRole Mutation"""
input ModeratorInput {
  """Roll-Number of the user"""
  roll: String!
}

type Mutation {
  """
  Mutation to create a Super-User account can't create Hostel_Sec, Restrictions : {Admin}
  """
  createAccount(CreateAccountInput: CreateAccountInput!): Boolean!
  createAmenity(CreateAmenityInput: CreateAmenityInput!, HostelId: String!): Boolean!

  """
  Mutation to create Announcements, Restrictions : {Admin, Hostel Secretary, and Hostel Affair Secretary}
  """
  createAnnouncement(AnnouncementInput: CreateAnnouncementInput!, Images: [Upload!]): Boolean!

  """comment on network and opportunity, Restrictions:{any authorized user}"""
  createCommentNetop(NetopId: String!, content: String!): Boolean!

  """comment on Query, Restrictions:{any authorized user}"""
  createCommentQuery(MyQueryId: String!, content: String!): Boolean!

  """Mutation to add Complaint, Restrictions : {anyone who is Authorised}"""
  createComplaint(CreateComplaintInput: ComplaintInput!, Images: [Upload!]): Boolean!

  """Mutation to create an event"""
  createEvent(Image: [Upload!], NewEventData: createEventInput!): Boolean!

  """
  Mutation to create Hostels, Restrictions : {Admin, Hostel Secretory and Hostel Affair Secretory}
  """
  createHostel(CreateHostelInput: CreateHostelInput!): Boolean!
  createHostelContact(CreateContactInput: CreateContactInput!, HostelId: String!): Boolean!

  """
  Mutation to create the Item, anyone who is authorised and have either Lost an Item or have Found it can access
  """
  createItem(Images: [Upload!], ItemInput: ItemInput!): Boolean!

  """create Query, Restrictions:{any authorized user}"""
  createMyQuery(Attachments: [Upload!], Image: Upload, createQuerysInput: createQuerysInput!): Boolean!

  """create network and opportunity, Restrictions:{any authorized user}"""
  createNetop(Attachments: [Upload!], Image: Upload, NewEventData: createNetopsInput!): Boolean!

  """ Mutation to create Hostel secretory, Restrictions : {Admin, Hostel Affair Secretory} 
  """
  createSec(CreateSecInput: CreateSecInput!, HostelId: String!): Boolean!

  """Mutation to Create Tags, Restrictions : {Admin}"""
  createTag(TagInput: TagInput!): Boolean!

  """
  Delete the event by id, Restrictions:{CREATED USER, ADMIN, SECRETORY, HAS}
  """
  deleteEvent(EventId: String!): Boolean!

  """edit Query, Restrictions:{user who created}"""
  deleteMyQuery(MyQueryId: String!): Boolean!

  """edit network and opportunity, Restrictions:{user who created}"""
  deleteNetop(NetopId: String!): Boolean!

  """
  Mutataion to update Announcement, Restrictions : {Admin, Hostel Affair Secretory, Hostel Secretory}
  """
  editAnnouncement(AnnouncementId: String!, Images: [Upload!], UpdateAnnouncementInput: EditAnnouncementInput!): Boolean!

  """Mutation to edit Complaint, Restrictions : {anyone who is Authorised}"""
  editComplaint(ComplaintId: String!, EditComplaintInput: EditComplaintInput!, Images: [Upload!]): Boolean!

  """Edit the event by id"""
  editEvent(EditEventData: editEventInput!, EventId: String!, Image: [Upload!]): Boolean!

  """
  Mutation : Mutation to edit the item, accessible to user who created that item
  """
  editItems(EditItemInput: EditItemInput!, Images: [Upload!], ItemId: String!): Boolean!

  """edit Query, Restrictions:{user who created}"""
  editMyQuery(Attachments: [Upload!], EditMyQuerysData: editQuerysInput!, Image: Upload, MyQueryId: String!): Boolean!

  """edit network and opportunity, Restrictions:{user who created}"""
  editNetop(Attachments: [Upload!], EditNetopsData: editNetopsInput!, Image: Upload, NetopId: String!): Boolean!

  """Mutation to login, Restrictions : {none}"""
  login(LoginInputs: LoginInput!): LoginOutput!
  removeMyQuery(MyQueryId: String!): Boolean!
  removeNetop(NetopId: String!): Boolean!

  """report Query, Restrictions:{any authorized user}"""
  reportMyQuery(MyQueryId: String!, description: String!): Boolean!

  """report network and opportunity, Restrictions:{any authorized user}"""
  reportNetop(NetopId: String!, description: String!): Boolean!

  """
  hide Announcement Mutation, Restrictions : {Admin, Hostel Affair Secretory and Hostel secretory }
  """
  resolveAnnouncement(AnnouncementId: String!): Boolean!

  """
  Mutation to resolve a complaint, resolver should add proofs of resolution, Restrictions : {Hostel_Secretory, HAS and Secretories}
  """
  resolveComplaint(ComplaintId: String!, DeleteComplaintInput: DeleteComplaintInput!, ProofImages: [Upload!]): Boolean!

  """
  Mutation to resolve the item, User who finds his lost entity will update, Restriction : {anyone who is authorised}
  """
  resolveItem(ItemId: String!): Boolean!

  """Like or Unlike the event, Restrictions:{ AUTHORIZED USER }"""
  toggleLikeEvent(EventId: String!): Boolean!

  """
  like or unlike (if it's previously liked) network and opportunity, Restrictions:{any authorized user}
  """
  toggleLikeNetop(NetopId: String!): Boolean!

  """
  like or unlike (if it's previously liked) Query, Restrictions:{any authorized user}
  """
  toggleLikeQuery(MyQueryId: String!): Boolean!

  """
  star or unstar (if it's previously star) network and opportunity, Restrictions:{any authorized user}
  """
  toggleStar(NetopId: String!): Boolean!

  """Star or Unstar the event, Restrictions:{ AUTHORIZED USER }"""
  toggleStarEvent(EventId: String!): Boolean!

  """
  upvote a complaint or remove upvote if previously upvoted, Restrictions : {any authorized user}
  """
  toggleupvotes(complaintId: String!): Boolean!
  updateAmenity(AmenityId: String!, UpdateAmenityInput: EditAmenityInput): Boolean!
  updateHostelContact(ContactId: String!, HostelId: String, UpdateContactInput: EditContactInput): Boolean!

  """
  Mutation to change Super-Users passwords, Restrictions : {Leads, Hostel Affair Secretory and Hostel Secretory}
  """
  updatePassword(NewPass: NewPass!): Boolean!

  """
  Mutation to change role of an ldap User to Moderator, Restrictions : {Admins and Leads}
  """
  updateRole(ModeratorInput: ModeratorInput!): Boolean!

  """
  Mutation to Update/Add User's name, interest, password, Restrictions : {User}
  """
  updateUser(UserInput: UserInput!): Boolean!
}

"""querys"""
type MyQuery {
  attachments: String

  """get list of comments"""
  comments: [Comment!]
  content: String!
  createdAt: DateTime!
  createdBy: User!
  id: String!
  isHidden: Boolean!

  """check if Query is liked by current user"""
  isLiked: Boolean!

  """number of likes"""
  likeCount: Float!
  photo: String
  title: String!
}

"""networking and opportunity"""
type Netop {
  attachments: String

  """get list of comments"""
  comments: [Comment!]
  content: String!
  createdAt: DateTime!
  createdBy: User!
  endTime: DateTime!
  id: String!
  isHidden: Boolean!

  """check if network and opportunity is liked by current user"""
  isLiked: Boolean!

  """is this netop is stared"""
  isStared: Boolean!

  """number of likes"""
  likeCount: Float!
  linkName: String
  linkToAction: String
  photo: String

  """get all the tags associated"""
  tags: [Tag!]
  title: String!
}

"""Input for Change-Password Mutation"""
input NewPass {
  """New Password"""
  newPassword: String!
}

type Query {
  """
  Query to fetch announcements of each hostel, Restrictions : { Admin, Hostel Affair Secretory} 
  """
  getAllAnnouncements(skip: Float!, take: Float!): getAllAnnouncementsOutput!

  """
  Query to fetch announcements of a particular hostel, Restrictions : { anyone who is authorised } 
  """
  getAnnouncements(HostelId: String!, skip: Float!, take: Float!): getAnnouncementsOutput!

  """
  get a list of Complaints sorted by date, ordered by upvotes if true, and order by isResolved(upresolved at the top)
  """
  getComplaints(OrderByIsResolved: Boolean, OrderByUpvotes: Boolean, skip: Float!, take: Float!): getComplaintsOutput!

  """Get the event details by id, Restrictions:{ AUTHORIZED USER }"""
  getEvent(EventId: String!): Event!

  """
  Get the list of event details with filters, Restrictions:{ AUTHORIZED USER }
  """
  getEvents(FileringCondition: fileringConditions, OrderByLikes: Boolean, skip: Float!, take: Float!): getEventOutput!

  """query to fetch hostels, Restrictions : {anyone who is authorized}"""
  getHostels: [Hostel!]!

  """
  Query to fetch all the unresolved items, filter by time of creation, Restrictions : {anyone who is authorised}
  """
  getItems(ItemsFilter: [Category!]!, skip: Float!, take: Float!): getItemsOutput!

  """
  Query to fetch personal profile, Restrictions : {anyone who is authoried}
  """
  getMe: User!

  """get an myQuery by id Query"""
  getMyQuery(MyQueryId: String!): MyQuery!

  """get a list of myQuerys by filer and order conditions"""
  getMyQuerys(OrderByLikes: Boolean, skip: Float!, take: Float!): getQueryOutput!

  """get an netop by id network and opportunity"""
  getNetop(NetopId: String!): Netop!

  """get a list of netops by filer and order conditions"""
  getNetops(FileringCondition: fileringConditions, OrderByLikes: Boolean, skip: Float!, take: Float!): getNetopOutput!
  getReports: [Report!]

  """
  Query to fetch Super-Users, Restrictions : {Admins, Leads, Moderators, Hostel Affair Secretory and Hostel Secretory}
  """
  getSuperUsers(RolesFilter: [UserRole!]!, skip: Float!, take: Float!): getSuperUsersOutput!

  """Query to Fetch all the tags, Restrictions : {anyone who is authorized}"""
  getTags: [Tag!]!

  """Query to Fetch a User by id, Restroctions : {anyone who is authorised}"""
  getUser(GetUserInput: GetUserInput!): User!

  """Query to fetch ldap Users, Restrictions : {anyone who is authorized}"""
  getUsers(skip: Float!, take: Float!): getUsersOutput!
  searchQueries(OrderByLikes: Boolean, search: String!, skip: Float!, take: Float!): getQueryOutput!
  searchUser(search: String!, skip: Float!, take: Float!): searchUserOutput
}

type Report {
  createdBy: User!
  description: String!
  id: String!
  netop: Netop!
  query: MyQuery!
}

type Subscription {
  createAnnoucementSubs(hostel: String!): Announcement!
  createEventS(tag: String!): Event!
  createNetopS(tag: String!): Netop!
}

"""Tag Entity, Users will follow these tags"""
type Tag {
  """Tag's Category"""
  category: String!

  """Unique uuid generated for each Tag"""
  id: String!

  """Tag's Title"""
  title: String!

  """User's That follow that Tag"""
  users: [User!]
}

"""Input For create Tag Mutation"""
input TagInput {
  """Tag's Category"""
  category: String!

  """Tag's Title"""
  title: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

"""User Entity"""
type User {
  """Announcements Created by User, can only be created if its a Super User"""
  announcements: [Announcement!]
  complaints: Complaint
  complaintsUpvoted: Complaint
  getHome: homeOutput

  """User's Hostel amd its details"""
  hostel: Hostel

  """Unique uuid generated for each User"""
  id: String!

  """User's Interest, collection of Tags"""
  interest: [Tag!]

  """This Field determines if User is a new User or not!"""
  isNewUser: Boolean!

  """User's Lost and Found Items"""
  items: [Item!]

  """LDAP User's Phone number"""
  mobile: String

  """User's name"""
  name: String

  """User's role"""
  role: UserRole!

  """Users Email(for Admin)/Roll-Number(for ldpap User)"""
  roll: String!
}

"""Input for Update-User Mutation"""
input UserInput {
  """LDAP User's hostel"""
  hostel: String!

  """LDAP User's interests, collection of tags"""
  interest: [String!]!

  """LDAP User's Phone number"""
  mobile: String

  """LDAP User's name"""
  name: String!
}

enum UserRole {
  ADMIN
  DEV_TEAM
  HAS
  HOSTEL_SEC
  LEADS
  MODERATOR
  SECRETORY
  USER
}

input createEventInput {
  content: String!
  linkName: String
  linkToAction: String
  location: String!
  tagIds: [String!]!
  time: String!
  title: String!
}

"""user"""
input createNetopsInput {
  content: String!
  endTime: String!
  linkName: String
  linkToAction: String
  tags: [String!]!
  title: String!
}

"""user"""
input createQuerysInput {
  content: String!
  title: String!
}

input editEventInput {
  content: String
  linkName: String
  linkToAction: String
  location: String
  tagIds: [String!]!
  time: String
  title: String
}

input editNetopsInput {
  content: String
  endTime: String
  linkName: String
  linkToAction: String
  tagIds: [String!]!
  title: String
}

input editQuerysInput {
  content: String
  title: String
}

input fileringConditions {
  isStared: Boolean
  tags: [String!]
}

""" Output type for getAllAnnouncements query"""
type getAllAnnouncementsOutput {
  announcementsList: [Announcement!]
  total: Float!
}

"""Output Type for getAnnouncements query"""
type getAnnouncementsOutput {
  announcementsList: [Announcement!]
  total: Float!
}

"""Output type for getComplaints query"""
type getComplaintsOutput {
  complaintsList: [Complaint!]
  total: Float!
}

type getEventOutput {
  list: [Event!]
  total: Float!
}

"""Output type for getItems query"""
type getItemsOutput {
  itemsList: [Item!]
  total: Float!
}

"""Output type for getNetop query"""
type getNetopOutput {
  netopList: [Netop!]
  total: Float!
}

"""Output type for getQuery query"""
type getQueryOutput {
  queryList: [MyQuery!]
  total: Float!
}

"""Output type for getSuperUsers query"""
type getSuperUsersOutput {
  total: Float!
  usersList: [User!]
}

"""Output type for getSuperUsers query"""
type getUsersOutput {
  total: Float!
  usersList: [User!]
}

""" Output type for getHome query"""
type homeOutput {
  announcements: [Announcement!]!
  events: [Event!]!
  netops: [Netop!]!
}

"""Output type for serachUsers query"""
type searchUserOutput {
  total: Float!
  usersList: [User!]
}
